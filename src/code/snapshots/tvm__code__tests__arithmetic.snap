---
source: src/code/tests.rs
expression: "emit!\n(r#\"\n        let a = 1;\n        let b = 2;\n        let r = a + b; // Some(dst)\n        a + b;         // None\n        let r = a - b; // Some(dst)\n        a - b;         // None\n        let r = a * b; // Some(dst)\n        a * b;         // None\n        let r = a / b; // Some(dst)\n        a / b;         // None\n        let r = a % b; // Some(dst)\n        a % b;         // None\n\n        let a = 1.2;\n        let b = 2.3;\n        let r = a + b; // Some(dst)\n        a + b;         // None\n        let r = a - b; // Some(dst)\n        a - b;         // None\n        let r = a * b; // Some(dst)\n        a * b;         // None\n        let r = a / b; // Some(dst)\n        a / b;         // None\n        let r = a % b; // Some(dst)\n        a % b;         // None\n    \"#)"
---
fn main
  registers: 6
  literals: [F64(1.2), F64(2.3)]
  bytecode:
    load_i16 dst=1 value=1
    load_i16 dst=2 value=2
    add_i64 dst=3 lhs=1 rhs=2
    add_i64 dst=4 lhs=1 rhs=2
    sub_i64 dst=3 lhs=1 rhs=2
    sub_i64 dst=4 lhs=1 rhs=2
    mul_i64 dst=3 lhs=1 rhs=2
    mul_i64 dst=4 lhs=1 rhs=2
    div_i64 dst=3 lhs=1 rhs=2
    div_i64 dst=4 lhs=1 rhs=2
    rem_i64 dst=3 lhs=1 rhs=2
    rem_i64 dst=4 lhs=1 rhs=2
    load_literal dst=1 src=0
    load_literal dst=2 src=1
    add_f64 dst=3 lhs=1 rhs=2
    add_f64 dst=4 lhs=1 rhs=2
    sub_f64 dst=3 lhs=1 rhs=2
    sub_f64 dst=4 lhs=1 rhs=2
    mul_f64 dst=3 lhs=1 rhs=2
    mul_f64 dst=4 lhs=1 rhs=2
    div_f64 dst=3 lhs=1 rhs=2
    div_f64 dst=4 lhs=1 rhs=2
    rem_f64 dst=3 lhs=1 rhs=2
    rem_f64 dst=4 lhs=1 rhs=2
    load_unit dst=0
    ret
