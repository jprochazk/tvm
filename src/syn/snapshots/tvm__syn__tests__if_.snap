---
source: src/syn/tests.rs
expression: "parse!(r#\"\n    if a {0}\n    else if b {1}\n    else if c {2}\n    else {0}\n\n    let v: int? = if true {0};\n    let v: int = if true {0} else {1};\n  \"#)"
---
Ast {
    decls: [],
    top_level: Block {
        body: [
            If {
                branches: [
                    Branch(
                        UseVar {
                            name: Ident("a"),
                        },
                        Block {
                            body: [],
                            tail: Some(
                                Int(
                                    0,
                                ),
                            ),
                        },
                    ),
                    Branch(
                        UseVar {
                            name: Ident("b"),
                        },
                        Block {
                            body: [],
                            tail: Some(
                                Int(
                                    1,
                                ),
                            ),
                        },
                    ),
                    Branch(
                        UseVar {
                            name: Ident("c"),
                        },
                        Block {
                            body: [],
                            tail: Some(
                                Int(
                                    2,
                                ),
                            ),
                        },
                    ),
                ],
                tail: Some(
                    Block {
                        body: [],
                        tail: Some(
                            Int(
                                0,
                            ),
                        ),
                    },
                ),
            },
            Let {
                name: Ident("v"),
                ty: Some(
                    Opt(
                        Opt {
                            inner: Named(
                                Named {
                                    name: Ident("int"),
                                },
                            ),
                        },
                    ),
                ),
                init: If {
                    branches: [
                        Branch(
                            Bool(
                                true,
                            ),
                            Block {
                                body: [],
                                tail: Some(
                                    Int(
                                        0,
                                    ),
                                ),
                            },
                        ),
                    ],
                    tail: None,
                },
            },
            Let {
                name: Ident("v"),
                ty: Some(
                    Named(
                        Named {
                            name: Ident("int"),
                        },
                    ),
                ),
                init: If {
                    branches: [
                        Branch(
                            Bool(
                                true,
                            ),
                            Block {
                                body: [],
                                tail: Some(
                                    Int(
                                        0,
                                    ),
                                ),
                            },
                        ),
                    ],
                    tail: Some(
                        Block {
                            body: [],
                            tail: Some(
                                Int(
                                    1,
                                ),
                            ),
                        },
                    ),
                },
            },
        ],
        tail: None,
    },
}
