---
source: src/syn/tests.rs
expression: "parse!(r#\"\n    2 + 2;\n    2 - 2;\n    2 / 2;\n    2 * 2;\n    2 % 2;\n    2 ** 2;\n    2 == 2;\n    2 != 2;\n    2 > 2;\n    2 >= 2;\n    2 < 2;\n    2 <= 2;\n    -2;\n    !true;\n    true && true;\n    false || true;\n    a ?? b;\n    ?a.b\n  \"#)"
---
Ast {
    decls: [],
    top_level: Block {
        body: [
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(+),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(-),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(/),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(*),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(%),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(**),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(==),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(!=),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(>),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(>=),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(<),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Int(2),
                    ),
                    Op(<=),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Unary(
                    Op(-),
                    Literal(
                        Int(2),
                    ),
                ),
            ),
            Expr(
                Unary(
                    Op(!),
                    Literal(
                        Bool(true),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Bool(true),
                    ),
                    Op(&&),
                    Literal(
                        Bool(true),
                    ),
                ),
            ),
            Expr(
                Binary(
                    Literal(
                        Bool(false),
                    ),
                    Op(||),
                    Literal(
                        Bool(true),
                    ),
                ),
            ),
            Expr(
                Binary(
                    UseVar(
                        Ident("a"),
                    ),
                    Op(??),
                    UseVar(
                        Ident("b"),
                    ),
                ),
            ),
        ],
        tail: Some(
            Unary(
                Op(?),
                UseField(
                    UseVar(
                        Ident("a"),
                    ),
                    Ident("b"),
                ),
            ),
        ),
    },
}
