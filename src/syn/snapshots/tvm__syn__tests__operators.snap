---
source: src/syn/tests.rs
expression: "parse!(r#\"\n    2 + 2;\n    2 - 2;\n    2 / 2;\n    2 * 2;\n    2 % 2;\n    2 ** 2;\n    2 == 2;\n    2 != 2;\n    2 > 2;\n    2 >= 2;\n    2 < 2;\n    2 <= 2;\n    -2;\n    !true;\n    true && true;\n    false || true;\n    a ?? b;\n    ?a.b\n  \"#)"
---
Ast {
    decls: [],
    top_level: Block {
        body: [
            Binary {
                left: Int(
                    2,
                ),
                op: Op(+),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(-),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(/),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(*),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(%),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(**),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(==),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(!=),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(>),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(>=),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(<),
                right: Int(
                    2,
                ),
            },
            Binary {
                left: Int(
                    2,
                ),
                op: Op(<=),
                right: Int(
                    2,
                ),
            },
            Unary {
                op: Op(-),
                right: Int(
                    2,
                ),
            },
            Unary {
                op: Op(!),
                right: Bool(
                    true,
                ),
            },
            Binary {
                left: Bool(
                    true,
                ),
                op: Op(&&),
                right: Bool(
                    true,
                ),
            },
            Binary {
                left: Bool(
                    false,
                ),
                op: Op(||),
                right: Bool(
                    true,
                ),
            },
            Binary {
                left: UseVar {
                    name: Ident("a"),
                },
                op: Op(??),
                right: UseVar {
                    name: Ident("b"),
                },
            },
        ],
        tail: Some(
            Unary {
                op: Op(?),
                right: UseField {
                    parent: UseVar {
                        name: Ident("a"),
                    },
                    name: Ident("b"),
                },
            },
        ),
    },
}
