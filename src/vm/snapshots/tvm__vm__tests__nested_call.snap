---
source: src/vm/tests.rs
expression: "run!(r#\"\n        fn id(v: int) -> int { v }\n        fn add(a: int, b: int) -> int { id(a) + id(b) }\n\n        add(id(2), id(3))\n    \"#)"
---
## Module

function "main" {
  registers: 5 (0 params)
  literals: []
  bytecode: (7 ops) [
    smi 2, r4    // add(id(2), id(3))
    call f1, r3  // 
    mov r3, r1   // 
    smi 3, r3    // 
    call f1, r2  // 
    call f0, r0  // 
    ret          //   
  ]
}

function "add" #0 {
  registers: 5 (2 params)
  literals: []
  bytecode: (7 ops) [
    mov r1, r4            // fn add(a: int, b: int) -> int { id(a) + id(b) }
    call f1, r3           // 
    mov r3, r0            // 
    mov r2, r4            // 
    call f1, r3           // 
    add <i64> r0, r3, r0  // 
    ret                   //   
  ]
}

function "id" #1 {
  registers: 2 (1 params)
  literals: []
  bytecode: (2 ops) [
    mov r1, r0  // 
    ret         //   
  ]
}


## Output

I64(5)

## Events

smi 2, r4                [_, _, _, _, _] -> [_, _, _, _, 2i]
call f1, r3              [_, _, _, _, 2i]
<frame "id" base=3, ret=2>
mov r1, r0               [_, 2i] -> [2i, 2i]
ret                      [2i, 2i]
mov r3, r1               [_, _, _, 2i, 2i] -> [_, 2i, _, 2i, 2i]
smi 3, r3                [_, 2i, _, 2i, 2i] -> [_, 2i, _, 3i, 2i]
call f1, r2              [_, 2i, _, 3i, 2i]
<frame "id" base=2, ret=5>
mov r1, r0               [_, 3i] -> [3i, 3i]
ret                      [3i, 3i]
call f0, r0              [_, 2i, 3i, 3i, 2i]
<frame "add" base=0, ret=6>
mov r1, r4               [_, 2i, 3i, 3i, 2i] -> [_, 2i, 3i, 3i, 2i]
call f1, r3              [_, 2i, 3i, 3i, 2i]
<frame "id" base=3, ret=2>
mov r1, r0               [3i, 2i] -> [2i, 2i]
ret                      [2i, 2i]
mov r3, r0               [_, 2i, 3i, 2i, 2i] -> [2i, 2i, 3i, 2i, 2i]
mov r2, r4               [2i, 2i, 3i, 2i, 2i] -> [2i, 2i, 3i, 2i, 3i]
call f1, r3              [2i, 2i, 3i, 2i, 3i]
<frame "id" base=3, ret=5>
mov r1, r0               [2i, 3i] -> [3i, 3i]
ret                      [3i, 3i]
add <i64> r0, r3, r0     [2i, 2i, 3i, 3i, 3i] -> [5i, 2i, 3i, 3i, 3i]
ret                      [5i, 2i, 3i, 3i, 3i]
ret                      [5i, 2i, 3i, 3i, 3i]

